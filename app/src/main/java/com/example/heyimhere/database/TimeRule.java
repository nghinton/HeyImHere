package com.example.heyimhere.database;

import androidx.room.ColumnInfo;
import androidx.room.Entity;
import androidx.room.ForeignKey;
import androidx.room.PrimaryKey;

@Entity (foreignKeys =
@ForeignKey(
        entity = Message.class,
        parentColumns = "id",
        childColumns = "messageId",
        onDelete = ForeignKey.CASCADE
))
//todo: Look into possibility to have a generic interface for rules so that the Rulewrangler doesn't need redundant functions.
public class TimeRule {
    @PrimaryKey(autoGenerate = true)
    @ColumnInfo(name = "id")
    public int id;

    @ColumnInfo(name = "messageId", index = true)
    public int messageId;

    @ColumnInfo(name = "fulfilled")
    public boolean fulfilled;

    @ColumnInfo(name = "beforeTime")
    public boolean beforeTime; //Whether or not the rule is fulfilled before or after the given timestamp.

    @ColumnInfo(name = "time")
    public long time; //Time to look for.

    public TimeRule(int messageId, boolean fulfilled, boolean beforeTime, long time) {
        assert fulfilled == beforeTime; //Room flips out if I don't have both of these as parameters.

        this.id = 0; //Is replaced by autogenerated key.
        this.messageId = messageId;
        this.fulfilled = fulfilled;
        this.beforeTime = beforeTime;
        this.time = time;
    }
}
