package com.example.heyimhere.database;

import androidx.room.ColumnInfo;
import androidx.room.Entity;
import androidx.room.ForeignKey;
import androidx.room.PrimaryKey;

@Entity (tableName = "LocationRule",
        foreignKeys =
@ForeignKey(
        entity = Message.class,
        parentColumns = "id",
        childColumns = "messageId",
        onDelete = ForeignKey.CASCADE
))
//todo: Look into possibility to have a generic interface for rules.
public class LocationRule {
    @PrimaryKey(autoGenerate = true)
    @ColumnInfo(name = "id")
    public int id;

    @ColumnInfo(name = "messageId", index = true)
    public int messageId;

    @ColumnInfo(name = "fulfilled")
    public boolean fulfilled;

    @ColumnInfo(name = "outsideSpot")
    public boolean outsideSpot; //Whether or not the rule is fulfilled when someone is outside the location.

    @ColumnInfo(name = "Name")
    public String name; //name of location.

    @ColumnInfo(name = "latitude")
    public double latitude;

    @ColumnInfo(name = "longitude")
    public double longitude;

    @ColumnInfo(name = "radius")
    public float radius;

    public LocationRule(int messageId, boolean fulfilled, boolean outsideSpot, String name, double latitude, double longitude, float radius) {
        assert fulfilled == outsideSpot; //Room flips out if I don't have both of these as parameters.

        this.id = 0; //Is replaced by autogenerated key.
        this.messageId = messageId;
        this.fulfilled = fulfilled;
        this.outsideSpot = outsideSpot;
        this.name = name;
        this.latitude = latitude;
        this.longitude = longitude;
        this.radius = radius;
    }
}